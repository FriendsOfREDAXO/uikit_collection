name: Build UIkit with REDAXO Theme

# Nur manuelles Auslösen des Workflows
on:
  workflow_dispatch:
    inputs:
      uikit_branch:
        description: 'UIkit Branch (main oder 3.x, etc.)'
        required: true
        default: 'main'

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      # Repository auschecken
      - name: Check out repository
        uses: actions/checkout@v3
        with:
          fetch-depth: 0  # Alle Historie abrufen, wichtig für das Bestimmen des Default-Branches
        
      # Node.js einrichten
      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'
          
      # Kopie des lokalen build-uikit.sh in GitHub Actions
      - name: Build UIkit
        run: |
          # Farben für Konsolenausgaben (für GitHub Actions angepasst)
          echo "=== UIkit Build für REDAXO starten (neueste Version) ==="
          
          # Verzeichnisse definieren
          ROOT_DIR="${GITHUB_WORKSPACE}"
          TEMP_DIR="${ROOT_DIR}/temp-uikit"
          # Verwende den vom Benutzer angegebenen Branch oder main als Fallback
          UIKIT_VERSION="${{ github.event.inputs.uikit_branch }}"
          
          echo "Root Directory: $ROOT_DIR"
          echo "UIkit Version/Branch: $UIKIT_VERSION"
          
          # Temporäres Verzeichnis löschen, falls vorhanden
          if [ -d "$TEMP_DIR" ]; then
              echo "Lösche vorhandenes temporäres Verzeichnis..."
              rm -rf "$TEMP_DIR"
          fi
          
          # UIkit Repository klonen
          echo "Klone UIkit Repository..."
          git clone https://github.com/uikit/uikit.git "$TEMP_DIR"
          cd "$TEMP_DIR"
          
          # Versuche den angegebenen Branch zu checken
          if git checkout "$UIKIT_VERSION"; then
            echo "Branch $UIKIT_VERSION erfolgreich ausgecheckt"
          else
            echo "Branch $UIKIT_VERSION nicht gefunden, versuche main und dann master..."
            if git checkout main; then
              echo "Branch main erfolgreich ausgecheckt"
              UIKIT_VERSION="main"
            elif git checkout master; then
              echo "Branch master erfolgreich ausgecheckt" 
              UIKIT_VERSION="master"
            else
              echo "Weder main noch master gefunden. Verwende default Branch."
            fi
          fi
          
          # Hole die aktuelle Version aus package.json
          ACTUAL_VERSION=$(node -p "require('./package.json').version")
          echo "Verwende UIkit Version: ${ACTUAL_VERSION}"
          echo "ACTUAL_VERSION=${ACTUAL_VERSION}" >> $GITHUB_ENV
          
          # Abhängigkeiten installieren
          echo "Installiere Abhängigkeiten..."
          npm install
          
          # Verzeichnis für das angepasste Theme erstellen
          echo "Erstelle angepasstes Theme..."
          mkdir -p custom/redaxo-theme
          
          # Debug: Prüfen, ob uikit-theme existiert
          echo "Inhalt des ROOT_DIR:"
          ls -la "${ROOT_DIR}"
          
          echo "Prüfe nach uikit-theme Verzeichnis:"
          if [ -d "${ROOT_DIR}/uikit-theme" ]; then
            echo "uikit-theme Verzeichnis gefunden"
            ls -la "${ROOT_DIR}/uikit-theme"
          else
            echo "WARNUNG: uikit-theme Verzeichnis nicht gefunden!"
          fi
          
          # Unser angepasstes Theme kopieren
          cp -r "${ROOT_DIR}/uikit-theme/"* custom/redaxo-theme/ || echo "Keine Theme-Dateien gefunden!"
          
          # Erstelle die Hauptdatei für das Theme
          cat > custom/redaxo-theme.less <<EOL
          // Import UIkit core (ohne default theme)
          @import "../src/less/uikit.less";
          
          // Import redaxo-spezifische Anpassungen
          @import "redaxo-theme/_import.less";
          EOL
          
          # UIkit mit angepasstem Theme bauen
          echo "Kompiliere UIkit mit angepasstem Theme..."
          npm run compile
          
          # Debug: Zeigen, was kompiliert wurde
          echo "Inhalt des dist-Verzeichnisses:"
          ls -la dist/
          ls -la dist/css/
          ls -la dist/js/
          
          # Kompilierte Dateien kopieren
          echo "Kopiere kompilierte Dateien in das assets-Verzeichnis..."
          ASSETS_DIR="${ROOT_DIR}/assets"
          mkdir -p "${ASSETS_DIR}"
          
          # Kopiere die kompilierten CSS-Dateien
          mkdir -p "${ASSETS_DIR}/css"
          cp -v dist/css/uikit*.css "${ASSETS_DIR}/css/"
          
          # Kopiere die kompilierten JavaScript-Dateien
          mkdir -p "${ASSETS_DIR}/js"
          cp -v dist/js/uikit*.js "${ASSETS_DIR}/js/"
          
          # Debug: Zeigen, was in assets kopiert wurde
          echo "Inhalt des Assets-Verzeichnisses:"
          ls -la "${ASSETS_DIR}"
          ls -la "${ASSETS_DIR}/css/"
          ls -la "${ASSETS_DIR}/js/"
          
          # Aufräumen
          echo "Räume auf..."
          cd "$ROOT_DIR"
          rm -rf "$TEMP_DIR"
          
          echo "UIkit wurde erfolgreich mit dem REDAXO-Theme gebaut!"
          echo "Die Dateien befinden sich in: ${ASSETS_DIR}"
          echo "Verwendete UIkit Version: ${ACTUAL_VERSION}"
      
      # Artefakte hochladen
      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: uikit_collection_assets
          path: assets/
      
      # Pull Request erstellen
      - name: Create Pull Request Branch
        run: |
          # Konfiguriere Git
          git config --global user.name "GitHub Actions Bot"
          git config --global user.email "actions@github.com"
          
          # Debug: Zeige Status vor dem Commit
          echo "Git Status vor dem Commit:"
          git status
          
          # Neuen Branch erstellen
          BRANCH_NAME="update-uikit-v$ACTUAL_VERSION"
          git checkout -b $BRANCH_NAME
          
          # Überprüfen, ob Änderungen vorhanden sind
          echo "Prüfen, ob assets existieren und Änderungen vorhanden sind:"
          if [ -d "assets" ]; then
            echo "Assets-Verzeichnis gefunden"
            
            # Force add assets, auch wenn sie ignoriert werden
            git add -f assets/
            
            # Debug: Status nach add
            echo "Git Status nach add:"
            git status
            
            # Commit erstellen
            git commit -m "Update UIkit assets to version $ACTUAL_VERSION"
            
            # Debug: Status nach commit
            echo "Git Status nach commit:"
            git status
            
            # Branch pushen (force, um sicherzustellen dass der Branch überschrieben wird)
            git push -f origin $BRANCH_NAME
            
            echo "Branch $BRANCH_NAME erfolgreich gepusht"
            echo "BRANCH_NAME=$BRANCH_NAME" >> $GITHUB_ENV
          else
            echo "FEHLER: Assets-Verzeichnis nicht gefunden! Build fehlgeschlagen?"
            ls -la
            exit 1
          fi
        
      # Pull Request erstellen
      - name: Create Pull Request
        uses: peter-evans/create-pull-request@v5
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          commit-message: Update UIkit assets to version ${{ env.ACTUAL_VERSION }}
          title: Update UIkit assets to version ${{ env.ACTUAL_VERSION }}
          body: |
            # UIkit Update
            
            Dieses Update aktualisiert die UIkit-Assets auf Version ${{ env.ACTUAL_VERSION }}.
            
            ## Änderungen:
            - Aktualisierung der CSS-Dateien
            - Aktualisierung der JavaScript-Dateien
            
            Automatisch erstellt durch den GitHub Actions Workflow.
          branch: ${{ env.BRANCH_NAME }}
          base: main
          delete-branch: false
